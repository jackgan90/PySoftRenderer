!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
BLACK	.\\color.py	/^BLACK = (0, 0, 0)$/;"	v
BLUE	.\\color.py	/^BLUE = (0, 0, 255)$/;"	v
Buffer3D	.\\buffer3d.py	/^class Buffer3D(resource.Resource):$/;"	c
CCW	.\\rasterizer.py	/^	CCW = 2$/;"	v	class:WindingOrder
CW	.\\rasterizer.py	/^	CW = 1$/;"	v	class:WindingOrder
Camera	.\\camera.py	/^class Camera(object):$/;"	c
Cube	.\\simplemesh.py	/^class Cube(object):$/;"	c
DEFAULT_WINDOW_HEIGHT	.\\pipeline.py	/^DEFAULT_WINDOW_HEIGHT = 400$/;"	v
DEFAULT_WINDOW_WIDTH	.\\pipeline.py	/^DEFAULT_WINDOW_WIDTH = 400$/;"	v
DrawMode	.\\pipeline.py	/^class DrawMode(object):$/;"	c
EPSILON	.\\srmath.py	/^EPSILON = 0.00001$/;"	v
FILL	.\\pipeline.py	/^	FILL = 2$/;"	v	class:DrawMode
FragmentProcessor	.\\fragmentprocessor.py	/^class FragmentProcessor(object):$/;"	c
FragmentShader	.\\shader.py	/^class FragmentShader(Shader):$/;"	c
GREEN	.\\color.py	/^GREEN = (0, 255, 0)$/;"	v
GREY	.\\color.py	/^GREY = (128, 128, 128)$/;"	v
MODEL_SPACE	.\\space.py	/^	MODEL_SPACE = 1$/;"	v	class:SpaceType
Pipeline	.\\pipeline.py	/^class Pipeline(object):$/;"	c
Plane	.\\simplemesh.py	/^class Plane(object):$/;"	c
Program	.\\program.py	/^class Program(Resource):$/;"	c
RED	.\\color.py	/^RED = (255, 0, 0)$/;"	v
RasterizeData	.\\rasterizer.py	/^class RasterizeData(object):$/;"	c
RasterizeInput	.\\pipeline.py	/^class RasterizeInput(object):$/;"	c
RasterizeInput	.\\rasterizer.py	/^class RasterizeInput(object):$/;"	c
Rasterizer	.\\rasterizer.py	/^class Rasterizer(object):$/;"	c
Resource	.\\resource.py	/^class Resource(object):$/;"	c
Scene	.\\scene.py	/^class Scene(object):$/;"	c
Shader	.\\shader.py	/^class Shader(Resource):$/;"	c
ShaderMgr	.\\shadermgr.py	/^class ShaderMgr(object):$/;"	c
SpaceType	.\\space.py	/^class SpaceType(object):$/;"	c
Texture	.\\texture.py	/^class Texture(buffer3d.Buffer3D):$/;"	c
TextureFS	.\\shader.py	/^class TextureFS(FragmentShader):$/;"	c
TextureMgr	.\\texturemgr.py	/^class TextureMgr(object):$/;"	c
TextureVS	.\\shader.py	/^class TextureVS(VertexShader):$/;"	c
VIEW_SPACE	.\\space.py	/^	VIEW_SPACE = 3$/;"	v	class:SpaceType
VertexColorFS	.\\shader.py	/^class VertexColorFS(FragmentShader):$/;"	c
VertexColorVS	.\\shader.py	/^class VertexColorVS(VertexShader):$/;"	c
VertexInput	.\\pipeline.py	/^class VertexInput(object):$/;"	c
VertexProcessor	.\\vertexprocessor.py	/^class VertexProcessor(object):$/;"	c
VertexShader	.\\shader.py	/^class VertexShader(Shader):$/;"	c
WHITE	.\\color.py	/^WHITE = (255, 255, 255)$/;"	v
WIRE_FRAME	.\\pipeline.py	/^	WIRE_FRAME = 1$/;"	v	class:DrawMode
WORLD_SPACE	.\\space.py	/^	WORLD_SPACE = 2$/;"	v	class:SpaceType
WindingOrder	.\\rasterizer.py	/^class WindingOrder(object):$/;"	c
Window	window.py	/^class Window(object):$/;"	c
YELLOW	.\\color.py	/^YELLOW = (255, 255, 0)$/;"	v
__add__	.\\srmath.py	/^	def __add__(self, m):$/;"	m	class:mat3
__add__	.\\srmath.py	/^	def __add__(self, v):$/;"	m	class:vec2
__add__	.\\srmath.py	/^	def __add__(self, v):$/;"	m	class:vec3
__add__	.\\srmath.py	/^	def __add__(self, v):$/;"	m	class:vec4
__div__	.\\srmath.py	/^	def __div__(self, scalar):$/;"	m	class:vec2
__div__	.\\srmath.py	/^	def __div__(self, scalar):$/;"	m	class:vec3
__div__	.\\srmath.py	/^	def __div__(self, scalar):$/;"	m	class:vec4
__getitem__	.\\srmath.py	/^	def __getitem__(self, i):$/;"	m	class:vec2
__getitem__	.\\srmath.py	/^	def __getitem__(self, i):$/;"	m	class:vec3
__getitem__	.\\srmath.py	/^	def __getitem__(self, i):$/;"	m	class:vec4
__getitem__	.\\srmath.py	/^	def __getitem__(self, xy):$/;"	m	class:mat3
__init__	.\\buffer3d.py	/^	def __init__(self, w, h, initialValue = None):$/;"	m	class:Buffer3D
__init__	.\\camera.py	/^	def __init__(self):$/;"	m	class:Camera
__init__	.\\fragmentprocessor.py	/^	def __init__(self, pipeline):$/;"	m	class:FragmentProcessor
__init__	.\\pipeline.py	/^	def __init__(self):$/;"	m	class:Pipeline
__init__	.\\pipeline.py	/^	def __init__(self):$/;"	m	class:RasterizeInput
__init__	.\\pipeline.py	/^	def __init__(self):$/;"	m	class:VertexInput
__init__	.\\program.py	/^	def __init__(self):$/;"	m	class:Program
__init__	.\\rasterizer.py	/^	def __init__(self):$/;"	m	class:RasterizeData
__init__	.\\rasterizer.py	/^	def __init__(self):$/;"	m	class:RasterizeInput
__init__	.\\rasterizer.py	/^	def __init__(self, graphicsPipeline):$/;"	m	class:Rasterizer
__init__	.\\resource.py	/^	def __init__(self):$/;"	m	class:Resource
__init__	.\\scene.py	/^	def __init__(self, graphicsPipeline):$/;"	m	class:Scene
__init__	.\\shader.py	/^	def __init__(self):$/;"	m	class:FragmentShader
__init__	.\\shader.py	/^	def __init__(self):$/;"	m	class:Shader
__init__	.\\shader.py	/^	def __init__(self):$/;"	m	class:TextureFS
__init__	.\\shader.py	/^	def __init__(self):$/;"	m	class:TextureVS
__init__	.\\shader.py	/^	def __init__(self):$/;"	m	class:VertexColorFS
__init__	.\\shader.py	/^	def __init__(self):$/;"	m	class:VertexColorVS
__init__	.\\shader.py	/^	def __init__(self):$/;"	m	class:VertexShader
__init__	.\\shadermgr.py	/^	def __init__(self):$/;"	m	class:ShaderMgr
__init__	.\\simplemesh.py	/^	def __init__(self, size = 1):$/;"	m	class:Cube
__init__	.\\simplemesh.py	/^	def __init__(self, width = 1, height = 1):$/;"	m	class:Plane
__init__	.\\srmath.py	/^	def __init__(self, matList=None):$/;"	m	class:mat3
__init__	.\\srmath.py	/^	def __init__(self, matList=None):$/;"	m	class:mat4
__init__	.\\srmath.py	/^	def __init__(self, x = 0.0, y = 0.0):$/;"	m	class:vec2
__init__	.\\srmath.py	/^	def __init__(self, x = 0.0, y = 0.0, z = 0.0):$/;"	m	class:vec3
__init__	.\\srmath.py	/^	def __init__(self, x = 0.0, y = 0.0, z = 0.0, w = 0.0):$/;"	m	class:vec4
__init__	.\\texture.py	/^	def __init__(self, w, h):$/;"	m	class:Texture
__init__	.\\texturemgr.py	/^	def __init__(self):$/;"	m	class:TextureMgr
__init__	.\\vertexprocessor.py	/^	def __init__(self, pipeline):$/;"	m	class:VertexProcessor
__init__	window.py	/^	def __init__(self, graphicsPipeline):$/;"	m	class:Window
__iter__	.\\srmath.py	/^	def __iter__(self):$/;"	m	class:vec2
__mul__	.\\srmath.py	/^	def __mul__(self, multiplier):$/;"	m	class:mat3
__mul__	.\\srmath.py	/^	def __mul__(self, scalar):$/;"	m	class:vec2
__mul__	.\\srmath.py	/^	def __mul__(self, scalar):$/;"	m	class:vec3
__mul__	.\\srmath.py	/^	def __mul__(self, scalar):$/;"	m	class:vec4
__repr__	.\\srmath.py	/^	def __repr__(self):$/;"	m	class:mat3
__repr__	.\\srmath.py	/^	def __repr__(self):$/;"	m	class:vec2
__repr__	.\\srmath.py	/^	def __repr__(self):$/;"	m	class:vec3
__repr__	.\\srmath.py	/^	def __repr__(self):$/;"	m	class:vec4
__setitem__	.\\srmath.py	/^	def __setitem__(self, i, val):$/;"	m	class:vec2
__setitem__	.\\srmath.py	/^	def __setitem__(self, i, val):$/;"	m	class:vec3
__setitem__	.\\srmath.py	/^	def __setitem__(self, i, val):$/;"	m	class:vec4
__setitem__	.\\srmath.py	/^	def __setitem__(self, xy, val):$/;"	m	class:mat3
__sub__	.\\srmath.py	/^	def __sub__(self, m):$/;"	m	class:mat3
__sub__	.\\srmath.py	/^	def __sub__(self, v):$/;"	m	class:vec2
__sub__	.\\srmath.py	/^	def __sub__(self, v):$/;"	m	class:vec3
__sub__	.\\srmath.py	/^	def __sub__(self, v):$/;"	m	class:vec4
_current_id	.\\helpers.py	/^_current_id = 0$/;"	v
_instance	.\\shadermgr.py	/^_instance = None$/;"	v
_instance	.\\texturemgr.py	/^_instance = None$/;"	v
_pipelineInstance	.\\pipeline.py	/^_pipelineInstance = None$/;"	v
adjugateMat	.\\srmath.py	/^	def adjugateMat(self):$/;"	m	class:mat3
adjugateMat	.\\srmath.py	/^	def adjugateMat(self):$/;"	m	class:mat4
check_cvv_out	.\\rasterizer.py	/^	def check_cvv_out(self, rasterInput):$/;"	m	class:Rasterizer
clamp	.\\srmath.py	/^def clamp(x, minVal, maxVal):$/;"	f
clear_depth_buffer	.\\pipeline.py	/^	def clear_depth_buffer(self):$/;"	m	class:Pipeline
clear_screen	.\\pipeline.py	/^	def clear_screen(self):$/;"	m	class:Pipeline
create_chess_board_texture	.\\texturemgr.py	/^	def create_chess_board_texture(self, w, h, color0, color1, cells = 5):$/;"	m	class:TextureMgr
create_program	.\\shadermgr.py	/^	def create_program(self):$/;"	m	class:ShaderMgr
create_shader	.\\shadermgr.py	/^	def create_shader(self, name):$/;"	m	class:ShaderMgr
create_vector	.\\srmath.py	/^def create_vector(componentCount):$/;"	f
cross	.\\srmath.py	/^	def cross(self, v):$/;"	m	class:vec3
cull_back_face	.\\rasterizer.py	/^	def cull_back_face(self, rasterDatas):$/;"	m	class:Rasterizer
cull_cvv	.\\rasterizer.py	/^	def cull_cvv(self, cvvOutTypes):$/;"	m	class:Rasterizer
destroy_window	window.py	/^	def destroy_window(self):$/;"	m	class:Window
determinant	.\\srmath.py	/^	def determinant(self):$/;"	m	class:mat3
determinant	.\\srmath.py	/^	def determinant(self):$/;"	m	class:mat4
doInit	.\\srmath.py	/^	def doInit(self, matList):$/;"	m	class:mat3
dot	.\\srmath.py	/^	def dot(self, v):$/;"	m	class:vec2
dot	.\\srmath.py	/^	def dot(self, v):$/;"	m	class:vec3
dot	.\\srmath.py	/^	def dot(self, v):$/;"	m	class:vec4
draw_cube	.\\scene.py	/^	def draw_cube(self):$/;"	m	class:Scene
draw_mesh	.\\pipeline.py	/^	def draw_mesh(self, mesh, cam, program, worldMat = srmath.mat4.identity, wireframeColor = color/;"	m	class:Pipeline
draw_plane	.\\scene.py	/^	def draw_plane(self):$/;"	m	class:Scene
draw_scanline	.\\rasterizer.py	/^	def draw_scanline(self, left, right, y, mode, shader):$/;"	m	class:Rasterizer
fast_inverse_mat4	.\\srmath.py	/^def fast_inverse_mat4(m):$/;"	f
fromList	.\\srmath.py	/^	def fromList(self, l):$/;"	m	class:vec2
fromList	.\\srmath.py	/^	def fromList(self, l):$/;"	m	class:vec3
fromList	.\\srmath.py	/^	def fromList(self, l):$/;"	m	class:vec4
getInverseMat	.\\srmath.py	/^	def getInverseMat(self):$/;"	m	class:mat3
getInverseMat	.\\srmath.py	/^	def getInverseMat(self):$/;"	m	class:mat4
get_depth	.\\pipeline.py	/^	def get_depth(self, x, y):$/;"	m	class:Pipeline
get_flat_triangles	.\\rasterizer.py	/^	def get_flat_triangles(self, v0, v1, v2):$/;"	m	class:Rasterizer
get_frame_buffer_data	.\\pipeline.py	/^	def get_frame_buffer_data(self):$/;"	m	class:Pipeline
get_frame_buffer_dimension	.\\pipeline.py	/^	def get_frame_buffer_dimension(self):$/;"	m	class:Pipeline
get_pipeline	.\\pipeline.py	/^def get_pipeline():$/;"	f
get_pipeline_uniform	.\\pipeline.py	/^	def get_pipeline_uniform(self, uniform):$/;"	m	class:Pipeline
get_pixel	.\\pipeline.py	/^	def get_pixel(self, x, y):$/;"	m	class:Pipeline
get_projection_mat	.\\camera.py	/^	def get_projection_mat(self):$/;"	m	class:Camera
get_shader_mgr	.\\shadermgr.py	/^def get_shader_mgr():$/;"	f
get_tex_mgr	.\\texturemgr.py	/^def get_tex_mgr():$/;"	f
get_unique_id	.\\helpers.py	/^def get_unique_id():$/;"	f
get_value	.\\buffer3d.py	/^	def get_value(self, x, y, default=None):$/;"	m	class:Buffer3D
get_world_to_view_mat	.\\camera.py	/^	def get_world_to_view_mat(self):$/;"	m	class:Camera
has_pipeline_uniform	.\\pipeline.py	/^	def has_pipeline_uniform(self, uniform):$/;"	m	class:Pipeline
init	.\\pipeline.py	/^	def init(self):$/;"	m	class:Pipeline
init	window.py	/^	def init(self):$/;"	m	class:Window
init_raster_data	.\\rasterizer.py	/^	def init_raster_data(self, rasterInput):$/;"	m	class:Rasterizer
interpolate_rasterize_data	.\\rasterizer.py	/^	def interpolate_rasterize_data(self, v0, v1, t):$/;"	m	class:Rasterizer
length	.\\srmath.py	/^	def length(self):$/;"	m	class:vec2
length	.\\srmath.py	/^	def length(self):$/;"	m	class:vec3
length	.\\srmath.py	/^	def length(self):$/;"	m	class:vec4
lerp	.\\srmath.py	/^def lerp(val0, val1, t):$/;"	f
look_at	.\\camera.py	/^	def look_at(self, at, up = srmath.vec3(0, 1, 0)):$/;"	m	class:Camera
make_inv_view_mat	.\\srmath.py	/^def make_inv_view_mat(eye, lookat, up):$/;"	f
make_inv_view_mat_axies	.\\srmath.py	/^def make_inv_view_mat_axies(xAxis, yAxis, zAxis, eye):$/;"	f
make_perspect_mat	.\\srmath.py	/^def make_perspect_mat(near, far, left, right, top, bottom):$/;"	f
make_perspect_mat_fov	.\\srmath.py	/^def make_perspect_mat_fov(aspectRatio, near, far, fov):$/;"	f
make_rotation_mat	.\\srmath.py	/^def make_rotation_mat(direction, angle):$/;"	f
make_rotation_x_mat	.\\srmath.py	/^def make_rotation_x_mat(xAngle):$/;"	f
make_rotation_y_mat	.\\srmath.py	/^def make_rotation_y_mat(yAngle):$/;"	f
make_rotation_z_mat	.\\srmath.py	/^def make_rotation_z_mat(zAngle):$/;"	f
make_scale_mat	.\\srmath.py	/^def make_scale_mat(scale):$/;"	f
make_translation_mat	.\\srmath.py	/^def make_translation_mat(translation):$/;"	f
make_view_mat	.\\srmath.py	/^def make_view_mat(eye, lookat, up):$/;"	f
make_view_mat_axis	.\\srmath.py	/^def make_view_mat_axis(xAxis, yAxis, zAxis, eye):$/;"	f
mat3	.\\srmath.py	/^class mat3(object):$/;"	c
mat4	.\\srmath.py	/^class mat4(mat3):$/;"	c
move	.\\camera.py	/^	def move(self, offset, st = space.SpaceType.VIEW_SPACE):$/;"	m	class:Camera
move_camera	.\\scene.py	/^	def move_camera(self, offset, st = space.SpaceType.VIEW_SPACE):$/;"	m	class:Scene
multipliableVecType	.\\srmath.py	/^	def multipliableVecType(self):$/;"	m	class:mat3
multipliableVecType	.\\srmath.py	/^	def multipliableVecType(self):$/;"	m	class:mat4
ndc_to_screen_coord	.\\srmath.py	/^def ndc_to_screen_coord(ndcPoint, width, height):$/;"	f
negate	.\\srmath.py	/^	def negate(self):$/;"	m	class:vec2
negate	.\\srmath.py	/^	def negate(self):$/;"	m	class:vec3
negate	.\\srmath.py	/^	def negate(self):$/;"	m	class:vec4
normalize	.\\srmath.py	/^	def normalize(self):$/;"	m	class:vec2
normalize	.\\srmath.py	/^	def normalize(self):$/;"	m	class:vec3
normalize	.\\srmath.py	/^	def normalize(self):$/;"	m	class:vec4
on_key_down	window.py	/^	def on_key_down(self, key):$/;"	m	class:Window
on_mouse_click	window.py	/^	def on_mouse_click(self, x, y):$/;"	m	class:Window
on_mouse_wheel_scroll	window.py	/^	def on_mouse_wheel_scroll(self, delta):$/;"	m	class:Window
process	.\\fragmentprocessor.py	/^	def process(self, rasterData, program):$/;"	m	class:FragmentProcessor
process	.\\rasterizer.py	/^	def process(self, rasterInputs, mode, wireframeColor, shader):$/;"	m	class:Rasterizer
process	.\\vertexprocessor.py	/^	def process(self, mesh, indices, program):$/;"	m	class:VertexProcessor
put_value	.\\buffer3d.py	/^	def put_value(self, x, y, value):$/;"	m	class:Buffer3D
rasterize_flat_triangle	.\\rasterizer.py	/^	def rasterize_flat_triangle(self, v0, v1, v2, mode, shader):$/;"	m	class:Rasterizer
rasterize_line	.\\rasterizer.py	/^	def rasterize_line(self, x0, y0, x1, y1, color):$/;"	m	class:Rasterizer
rasterize_point	.\\rasterizer.py	/^	def rasterize_point(self, x, y, color):$/;"	m	class:Rasterizer
rasterize_triangle	.\\rasterizer.py	/^	def rasterize_triangle(self, rasterDatas, mode, color, shader):$/;"	m	class:Rasterizer
rasterize_triangle_wireframe	.\\rasterizer.py	/^	def rasterize_triangle_wireframe(self, v0, v1, v2, color):$/;"	m	class:Rasterizer
register_event_listeners	window.py	/^	def register_event_listeners(self):$/;"	m	class:Window
run	.\\shader.py	/^	def run(self):$/;"	m	class:FragmentShader
run	.\\shader.py	/^	def run(self):$/;"	m	class:TextureFS
run	.\\shader.py	/^	def run(self):$/;"	m	class:TextureVS
run	.\\shader.py	/^	def run(self):$/;"	m	class:VertexColorFS
run	.\\shader.py	/^	def run(self):$/;"	m	class:VertexColorVS
run	.\\shader.py	/^	def run(self):$/;"	m	class:VertexShader
sample_texture	.\\pipeline.py	/^	def sample_texture(self, tex, uv):$/;"	m	class:Pipeline
sample_texture	.\\shader.py	/^	def sample_texture(self, tex, uv):$/;"	m	class:Shader
set_all_value	.\\buffer3d.py	/^	def set_all_value(self, value):$/;"	m	class:Buffer3D
set_depth	.\\pipeline.py	/^	def set_depth(self, x, y, value):$/;"	m	class:Pipeline
set_front_face	.\\pipeline.py	/^	def set_front_face(self, face):$/;"	m	class:Pipeline
set_front_face	.\\rasterizer.py	/^	def set_front_face(self, face):$/;"	m	class:Rasterizer
set_pixel	.\\pipeline.py	/^	def set_pixel(self, x, y, color):$/;"	m	class:Pipeline
set_uniform	.\\shader.py	/^	def set_uniform(self, name, value):$/;"	m	class:Shader
set_varying	.\\shader.py	/^	def set_varying(self, name, value):$/;"	m	class:Shader
sqrLength	.\\srmath.py	/^	def sqrLength(self):$/;"	m	class:vec2
sqrLength	.\\srmath.py	/^	def sqrLength(self):$/;"	m	class:vec3
sqrLength	.\\srmath.py	/^	def sqrLength(self):$/;"	m	class:vec4
swapElements	.\\srmath.py	/^	def swapElements(self, idx0, idx1):$/;"	m	class:mat3
toList	.\\srmath.py	/^	def toList(self):$/;"	m	class:vec2
toList	.\\srmath.py	/^	def toList(self):$/;"	m	class:vec3
toList	.\\srmath.py	/^	def toList(self):$/;"	m	class:vec4
transpose	.\\srmath.py	/^	def transpose(self):$/;"	m	class:mat3
transpose	.\\srmath.py	/^	def transpose(self):$/;"	m	class:mat4
update	.\\scene.py	/^	def update(self):$/;"	m	class:Scene
update_screen	window.py	/^	def update_screen(self):$/;"	m	class:Window
update_statistic_info	window.py	/^	def update_statistic_info(self):$/;"	m	class:Window
vec2	.\\srmath.py	/^class vec2(object):$/;"	c
vec3	.\\srmath.py	/^class vec3(object):$/;"	c
vec4	.\\srmath.py	/^class vec4(object):$/;"	c
w	main.py	/^	w = tkinterwindow.TkinterWindow(pipeline.get_pipeline())$/;"	v
window_update	window.py	/^	def window_update(self):$/;"	m	class:Window
